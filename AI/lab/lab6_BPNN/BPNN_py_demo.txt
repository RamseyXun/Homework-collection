class NeuralNetwork(object):
    def __init__(self, input_nodes, hidden_nodes, output_nodes, learning_rate):
        # Set number of nodes in input, hidden and output layers.
        self.input_nodes = input_nodes
        self.hidden_nodes = hidden_nodes
        self.output_nodes = output_nodes

        # Initialize weights
        self.weights_input_to_hidden = 

        self.weights_hidden_to_output = 
		
        self.lr = learning_rate
        
        #### Set this to your implemented sigmoid function ####
        # Activation function is the sigmoid function
        self.activation_function = 
    
    def train(self, inputs_list, targets_list):
        # Convert inputs list to 2d array
        inputs = 
        targets = 
        
        #### Implement the forward pass here ####
        ### Forward pass ###
        # TODO: Hidden layer
        hidden_inputs = # signals into hidden layer
        hidden_outputs = # signals from hidden layer
        
        # Output layer
        final_inputs = # signals into final output layer
        final_outputs = # signals from final output layer
        
        #### Implement the backward pass here ####
        ### Backward pass ###
        
        # Output error
        output_errors = # Output layer error is the difference between desired target and actual output.
        
        # Backpropagated error
        hidden_errors = # errors propagated to the hidden layer
        hidden_grad = # hidden layer gradients
        
        # Update the weights
        self.weights_hidden_to_output += # update hidden-to-output weights with gradient descent step
        self.weights_input_to_hidden += # update input-to-hidden weights with gradient descent step
 
        
    def run(self, inputs_list):
        # Run a forward pass through the network
        inputs = 
        
        #### Implement the forward pass here ####
		# Hidden layer
        hidden_inputs = # signals into hidden layer
        hidden_outputs = 
        
        # Output layer
        final_inputs = # signals into final output layer
        final_outputs = # signals from final output layer 
        
        return final_outputs